// Author: Bob Rubbens - Knights of the Compiler
// Creation date: 2014-11-07
// Contact: http://plusminos.nl - @broervanlisa - gmail (bobrubbens)

// Public
#include <cmath>
#include <iostream>
#include <SDL2/SDL.h>
#include <string>
#include <vector>

// Private
#include "gamestates/gsIntro.hpp"
#include "main/global.hpp"
#include "nnb/log/log.hpp"
#include "nnb/utils/constants.hpp"
#include "nnb/utils/SDL_Helpers.hpp"

gsIntro::gsIntro() : player(true) {
	stateStart = SDL_GetTicks();

	message = g_fm->getText("04b03.ttf", 50);
	message.setText("Press [space] to start");
	message.setColor(gb_4);
	message.setHAlign(nnb::HAlign::CENTER);
	message.setPosition(SCR_W / 2, 180);

	message2 = g_fm->getText("04b03.ttf", 50);
	message2.setText("Press [esc] to leave");
	message2.setColor(gb_4);
	message2.setHAlign(nnb::HAlign::CENTER);
	message2.setPosition(SCR_W / 2, 300);
}

gsIntro::~gsIntro() {
}

void gsIntro::event(SDL_Event& e) {
	player.event(e);

	switch (e.type) {
		case SDL_QUIT:
			g_gm->exit();
			NNB_LOG << "Exit was requested";
			break;
		case SDL_MOUSEBUTTONUP:
			NNB_LOG << "Mouse button was pressed at (" << e.button.x << "; " << e.button.y << ")";
			break;
		case SDL_KEYDOWN:
			if (e.key.keysym.sym == SDLK_ESCAPE) {
				g_gm->exit();
			}			
		default:
			break;
	}

}

void gsIntro::logic(float delta) {
	player.logic(delta);
	
	SDL_Rect playBB = message.getBounds();
	SDL_Rect meBB = player.getMeBounds();

	if (SDL_HasIntersection(&playBB, &meBB)) {
		changeStart = SDL_GetTicks();
		target = 0;
	}

	if (target != -1) {
		float d = (SDL_GetTicks() - changeStart) / (float) 800;
		switch (target) {
		case 0:
			message.setColor((1 - d) * 255 + d * gb_4.r, (1 - d)*255 + d * gb_4.g, (1 - d)*255 + d * gb_4.b);
			break;
		}
	} else {
		float d = (SDL_GetTicks() - stateStart) / (float) 2000;
		float e = d * 2 * nnb::PI;
		float f = std::cos(e);
		message.setColor((1 - f) * 255 + f * gb_4.r, (1 - f)*255 + f * gb_4.g, (1 - f)*255 + f * gb_4.b);
	}

	if (target != -1 && SDL_GetTicks() - changeStart > 800) {
		switch (target) {
		case 0:
			g_gm->setState("main");
			break;
		}
	}
	
}

void gsIntro::render() const {
	SDL_SetRenderDrawColor(g_renderer, gb_1.r, gb_1.g, gb_1.b, 255);
	SDL_RenderClear(g_renderer);

	message.render();
	message2.render();
	player.render();

	SDL_RenderPresent(g_renderer);
}
