// Author: Bob Rubbens - Knights of the Compiler
// Creation date: 2014-11-07
// Contact: http://plusminos.nl - @broervanlisa - gmail (bobrubbens)

// Public
#include <cmath>
#include <iostream>
#include <SDL2/SDL.h>
#include <string>
#include <vector>

// Private
#include "gamestates/gsHighscores.hpp"
#include "main/global.hpp"
#include "nnb/log/log.hpp"
#include "nnb/utils/constants.hpp"
#include "nnb/utils/StringHelpers.hpp"
#include "main/highscore.hpp"

gsHighscores::gsHighscores() {
	title = g_fm->getText("04b03.ttf", 50);
	title.setText("Highscores");
	title.setColor(gb_4);
	title.setHAlign(nnb::HAlign::CENTER);
	title.setPosition(SCR_W / 2, 30);

	auto db = getHighscores();

	int i = 0;
	for (auto entry : db) {
		nnb::Text name = g_fm->getText("04b03.ttf", 50);
		nnb::Text score = g_fm->getText("04b03.ttf", 50);

		name.setPosition(200, i * 70 + 100);
		score.setPosition(400, i * 70 + 100);
		name.setColor(gb_4);
		score.setColor(gb_4);

		name.setText(std::get<0>(entry));
		score.setText(nnb::tos(std::get<1>(entry)));
		auto tuple = std::make_tuple(std::move(name), std::move(score));
		table.push_back(std::move(tuple));
		i++;
	}
}

gsHighscores::~gsHighscores() {
}

void gsHighscores::event(SDL_Event& e) {
	switch (e.type) {
		case SDL_QUIT:
			g_gm->exit();
			NNB_LOG << "Exit was requested";
			break;
		case SDL_MOUSEBUTTONUP:
			NNB_LOG << "Mouse button was pressed at (" << e.button.x << "; " << e.button.y << ")";
			break;
		case SDL_KEYDOWN:
			if (e.key.keysym.sym == SDLK_ESCAPE) {
				g_gm->setState("main");
			}			
		default:
			break;
	}

}

void gsHighscores::logic(float delta) {
}

void gsHighscores::render() const {
	SDL_SetRenderDrawColor(g_renderer, gb_1.r, gb_1.g, gb_1.b, 255);
	SDL_RenderClear(g_renderer);

	title.render();

	for (auto& entry : table) {
		std::get<0>(entry).render();
		std::get<1>(entry).render();
	}

	SDL_RenderPresent(g_renderer);
}
